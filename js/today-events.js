// Today's Events Module - Displays aggregated events happening today across all cities
class TodayEvents {
    constructor() {
        this.todaysEventsData = null;
        this.isLoading = false;
        this.hasError = false;
        
        logger.componentInit('EVENT', 'Today\'s Events module initialized');
    }

    // Load today's events data from GitHub Actions generated file
    async loadTodaysEvents() {
        if (this.isLoading) {
            logger.debug('EVENT', 'Already loading today\'s events, skipping duplicate request');
            return this.todaysEventsData;
        }

        this.isLoading = true;
        this.hasError = false;
        
        try {
            logger.time('EVENT', 'Loading today\'s events');
            logger.apiCall('EVENT', 'Fetching aggregated today\'s events data');
            
            // Try to load the today-events.json file generated by GitHub Actions
            const response = await fetch('data/today-events.json', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                },
                cache: 'default' // Use browser cache for efficiency
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const todaysEventsData = await response.json();
            
            // Validate the data structure
            if (!todaysEventsData || typeof todaysEventsData !== 'object') {
                throw new Error('Invalid today\'s events data structure');
            }

            this.todaysEventsData = todaysEventsData;
            
            logger.timeEnd('EVENT', 'Loading today\'s events');
            logger.componentLoad('EVENT', 'Today\'s events data loaded successfully', {
                todayEventCount: todaysEventsData.todayEvents?.length || 0,
                tomorrowEventCount: todaysEventsData.tomorrowEvents?.length || 0,
                lastUpdated: todaysEventsData.lastUpdated,
                citiesWithTodayEvents: new Set(todaysEventsData.todayEvents?.map(e => e.cityKey) || []).size,
                citiesWithTomorrowEvents: new Set(todaysEventsData.tomorrowEvents?.map(e => e.cityKey) || []).size
            });

            return this.todaysEventsData;

        } catch (error) {
            this.hasError = true;
            logger.componentError('EVENT', 'Failed to load today\'s events data', {
                error: error.message,
                errorName: error.name,
                fallbackBehavior: 'Will show fallback message'
            });
            return null;
        } finally {
            this.isLoading = false;
        }
    }

    // Generate HTML for a single event item
    generateEventItem(cityEvent) {
        const { cityKey, cityName, event } = cityEvent;
        
        // Format the city link
        const cityLink = `city.html?city=${cityKey}`;
        
        // Format cover charge display
        const coverHtml = event.cover && event.cover.trim() && 
                          event.cover.toLowerCase() !== 'free' && 
                          event.cover.toLowerCase() !== 'no cover' 
            ? `<span class="event-cover">${event.cover}</span>` 
            : '';

        // Format recurring badge
        const recurringBadge = event.recurring ? 
            `<span class="recurring-badge">ðŸ”„</span>` : '';

        return `
            <div class="today-event-item">
                <div class="event-header">
                    <h4 class="event-name">${event.name}</h4>
                    <div class="event-meta">
                        <span class="event-time">${event.time || 'TBD'}</span>
                        ${recurringBadge}
                    </div>
                </div>
                <div class="event-details">
                    <div class="event-location">
                        <span class="city-name">
                            <a href="${cityLink}" class="city-link">${cityName}</a>
                        </span>
                        ${event.bar ? `<span class="venue-name">@ ${event.bar}</span>` : ''}
                    </div>
                    ${coverHtml}
                </div>
            </div>
        `;
    }

    // Generate HTML for the today's events section
    generateTodaysEventsHTML(todaysEventsData) {
        if (!todaysEventsData) {
            return this.generateErrorHTML();
        }

        const todayEvents = todaysEventsData.todayEvents || [];
        const tomorrowEvents = todaysEventsData.tomorrowEvents || [];
        
        // Limit events to prevent overwhelming the main page
        const maxTodayEvents = 8;
        const maxTomorrowEvents = 4;
        
        const displayTodayEvents = todayEvents.slice(0, maxTodayEvents);
        const displayTomorrowEvents = tomorrowEvents.slice(0, maxTomorrowEvents);
        
        const hasMoreToday = todayEvents.length > maxTodayEvents;
        const hasMoreTomorrow = tomorrowEvents.length > maxTomorrowEvents;

        // Generate today's events HTML
        const todayEventsHTML = displayTodayEvents.length > 0 
            ? displayTodayEvents.map(cityEvent => this.generateEventItem(cityEvent)).join('')
            : '<div class="no-events">No events scheduled for today</div>';

        // Generate tomorrow's events HTML (only if we have today's events or no today's events)
        const tomorrowSection = displayTomorrowEvents.length > 0 ? `
            <div class="tomorrow-events">
                <h3>Tomorrow</h3>
                <div class="events-grid tomorrow">
                    ${displayTomorrowEvents.map(cityEvent => this.generateEventItem(cityEvent)).join('')}
                    ${hasMoreTomorrow ? `<div class="more-events">+${tomorrowEvents.length - maxTomorrowEvents} more tomorrow</div>` : ''}
                </div>
            </div>
        ` : '';

        // Generate "more events" link if needed
        const moreEventsLink = (hasMoreToday || todayEvents.length > 0) ? `
            <div class="view-all-events">
                <a href="#cities" class="cta-button">View All Cities & Events</a>
            </div>
        ` : '';

        return `
            <div class="todays-events-content">
                <div class="today-events">
                    <h3>Today</h3>
                    <div class="events-grid today">
                        ${todayEventsHTML}
                        ${hasMoreToday ? `<div class="more-events">+${todayEvents.length - maxTodayEvents} more today</div>` : ''}
                    </div>
                </div>
                ${tomorrowSection}
                ${moreEventsLink}
                <div class="last-updated">
                    <small>Updated ${this.formatLastUpdated(todaysEventsData.lastUpdated)}</small>
                </div>
            </div>
        `;
    }

    // Generate error HTML when data can't be loaded
    generateErrorHTML() {
        return `
            <div class="todays-events-error">
                <div class="error-message">
                    <h3>ðŸ“… Today's Events Temporarily Unavailable</h3>
                    <p>We're updating our event data. Check back in a few minutes or browse events by city below.</p>
                    <div class="error-actions">
                        <a href="#cities" class="cta-button">Browse Cities</a>
                        <button onclick="window.todayEvents.retryLoad()" class="retry-button">Try Again</button>
                    </div>
                </div>
            </div>
        `;
    }

    // Format the last updated timestamp for display
    formatLastUpdated(lastUpdated) {
        if (!lastUpdated) return 'recently';
        
        try {
            const updateDate = new Date(lastUpdated);
            const now = new Date();
            const diffMinutes = Math.floor((now - updateDate) / (1000 * 60));
            
            if (diffMinutes < 5) return 'just now';
            if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
            
            const diffHours = Math.floor(diffMinutes / 60);
            if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
            
            return updateDate.toLocaleDateString();
        } catch (error) {
            logger.warn('EVENT', 'Error formatting last updated time', { lastUpdated, error });
            return 'recently';
        }
    }

    // Retry loading today's events (for error recovery)
    async retryLoad() {
        logger.userInteraction('EVENT', 'User clicked retry for today\'s events');
        
        // Reset error state
        this.hasError = false;
        this.todaysEventsData = null;
        
        // Show loading state
        this.showLoadingState();
        
        // Attempt to reload
        await this.loadAndDisplay();
    }

    // Show loading state in the today's events section
    showLoadingState() {
        const container = document.getElementById('todays-events-container');
        if (container) {
            container.innerHTML = `
                <div class="todays-events-loading">
                    <div class="loading-message">ðŸ“… Loading today's events...</div>
                </div>
            `;
        }
    }

    // Main function to load and display today's events
    async loadAndDisplay() {
        const container = document.getElementById('todays-events-container');
        if (!container) {
            logger.warn('EVENT', 'Today\'s events container not found on page');
            return;
        }

        // Show loading state
        this.showLoadingState();

        // Load the data
        const data = await this.loadTodaysEvents();
        
        // Generate and display the HTML
        const html = this.generateTodaysEventsHTML(data);
        container.innerHTML = html;

        // Log the final result
        if (data && data.todayEvents) {
            logger.componentLoad('EVENT', 'Today\'s events displayed successfully', {
                todayEventCount: data.todayEvents.length,
                tomorrowEventCount: data.tomorrowEvents?.length || 0,
                hasError: this.hasError
            });
        } else {
            logger.warn('EVENT', 'Today\'s events displayed with error state');
        }
    }

    // Initialize today's events (called from app.js)
    async init() {
        logger.componentInit('EVENT', 'Initializing today\'s events display');
        
        // Check if we're on the main page
        const container = document.getElementById('todays-events-container');
        if (!container) {
            logger.debug('EVENT', 'Not on main page or today\'s events container not found');
            return;
        }

        // Load and display events
        await this.loadAndDisplay();
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TodayEvents;
} else {
    window.TodayEvents = TodayEvents;
}